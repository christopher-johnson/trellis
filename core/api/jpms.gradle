apply plugin: 'osgi'
apply plugin: 'com.zyxist.chainsaw'

description = 'Trellis API'

ext {
    moduleName = 'org.trellisldp.jpms.api'
}

javaModule {
    name = moduleName
    extraTestModules = ['org.mockito', 'org.trellisldp.jpms.vocabulary', 'org.apache.jena.core', 'org.apache.jena.arq']
}

dependencies {
    api("org.apache.commons:commons-rdf-api:$commonsRdfVersion")
    api("org.apache.commons:commons-lang3:$commonsLangVersion")

    testImplementation project(':trellis-vocabulary')
    testImplementation("commons-io:commons-io:$commonsIoVersion")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
    testImplementation("org.apache.commons:commons-rdf-simple:$commonsRdfVersion")
    testImplementation("org.apache.commons:commons-rdf-jena-jpms:$commonsRdfJenaVersion")
    testImplementation("org.apache.commons:commons-text:$commonsTextVersion")
    testImplementation("org.apache.jena:jena.arq-jpms:$jenaVersion")
    testImplementation("org.apache.jena:jena.core-jpms:$jenaVersion")
    testImplementation("org.apache.jena:jena.iri-jpms:$jenaVersion")
    testImplementation("org.apache.servicemix.bundles:org.apache.servicemix.bundles.xerces:$servicemixXercesVersion")
    testImplementation("org.apache.thrift:libthrift:$thriftVersion")
    testRuntimeClasspath("com.google.guava:guava:$guavaVersion")
}

jar {
    manifest {
        description project.description
        docURL project.docURL
        vendor project.vendor
        license project.license

        instruction 'Automatic-Module-Name', moduleName
        instruction 'Import-Package', '*'
        instruction 'Export-Package', "$moduleName;version=$projectOsgiVersion"
        instruction 'Require-Capability', '''\
            osgi.extender; filter:="(osgi.extender=osgi.serviceloader.processor)",
            osgi.serviceloader;
                filter:="(osgi.serviceloader=org.apache.commons.rdf.api.RDF)";
                resolution:=mandatory; cardinality:=at_least_one
            '''
    }
    appendix 'jpms'
}

