apply plugin: 'osgi'
apply plugin: 'com.zyxist.chainsaw'

description = 'Trellis HTTP API'

ext {
    javaModuleName = 'org.trellisldp.jpms.http'
    osgiModuleName = 'org.trellisldp.http'
}

javaModule {
    name = javaModuleName
    extraTestModules = ['org.trellisldp.jpms.agent', 'org.trellisldp.jpms.audit', 'org.trellisldp.jpms.id', 'org' +
            '.trellisldp.jpms.io']
}

configurations {
    api {
        exclude group: 'javax.inject', module: 'javax.inject'
    }
}

dependencies {
    api("io.dropwizard.metrics:metrics-annotation:$metricsVersion")
    api("javax.annotation:javax.annotation-api:$javaxAnnotationsVersion")
    api("javax.ws.rs:javax.ws.rs-api:$jaxrsVersion")
    api("org.apache.commons:commons-rdf-api:$commonsRdfVersion")
    api("org.glassfish.hk2.external:javax.inject:$javaxInjectVersion")
    api("org.glassfish.hk2:hk2-utils:$hk2Version")
    api("org.trellisldp:trellis-api-jpms:$version")

    implementation("commons-codec:commons-codec:$commonsCodecVersion") { force = true }
    implementation("commons-io:commons-io:$commonsIoVersion") { force = true }
    implementation("javax.json:javax.json-api:$javaxJsonVersion")
    implementation("org.apache.tamaya:tamaya-api:$tamayaVersion")
    implementation("org.slf4j:slf4j-api:$slf4jVersion")
    implementation("org.trellisldp:trellis-vocabulary-jpms:$version")

    testImplementation("ch.qos.logback:logback-classic:$logbackVersion")
    testImplementation("com.github.jsonld-java:jsonld-java:$jsonldVersion") {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient-osgi'
        exclude group: 'org.apache.httpcomponents', module: 'httpcore-osgi'
    }
    testImplementation("com.google.guava:guava:$guavaVersion") {force = true}
    testImplementation("javax.xml.bind:jaxb-api:$jaxbVersion")
    testImplementation("javax.activation:javax.activation-api:$activationApiVersion")
    testImplementation("org.apache.commons:commons-text:$commonsTextVersion")
    testImplementation("org.apache.commons:commons-rdf-simple:$commonsRdfVersion")
    testImplementation("org.apache.httpcomponents:httpclient-cache:$httpclientVersion"){
        exclude(module: 'commons-logging')
    }
    testImplementation("org.apache.tamaya:tamaya-core:$tamayaVersion")
    testImplementation("org.apache.thrift:libthrift:$thriftVersion"){
        exclude(module: 'httpclient')
        exclude(module: 'httpcore')
    }
    testImplementation("org.glassfish:javax.json:$jsonVersion")
    testImplementation("org.glassfish.jersey.core:jersey-server:$jerseyVersion")
    testImplementation("org.glassfish.jersey.test-framework" +
            ".providers:jersey-test-framework-provider-inmemory:$jerseyVersion")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
    testImplementation("org.trellisldp:trellis-agent-jpms:$version")
    testImplementation("org.trellisldp:trellis-audit-jpms:$version")
    testImplementation("org.trellisldp:trellis-constraint-rules-jpms:$version")
    testImplementation("org.trellisldp:trellis-event-serialization-jpms:$version")
    testImplementation("org.trellisldp:trellis-id-jpms:$version")
    testImplementation("org.trellisldp:trellis-io-jena-jpms:$version")
}

jar {
    manifest {
        description project.description
        docURL project.docURL
        vendor project.vendor
        license project.license

        instruction 'Automatic-Module-Name', javaModuleName
        instruction 'Import-Package', '*'
        instruction 'Export-Package', "$osgiModuleName;version=$projectOsgiVersion"
        instruction 'Require-Capability', '''osgi.extender; filter:="(osgi.extender=osgi.serviceloader.processor)",osgi.serviceloader;
                filter:="(osgi.serviceloader=org.trellisldp.api.AuditService)";resolution:=optional; cardinality:=optional,
                osgi.serviceloader;filter:="(osgi.serviceloader=org.trellisldp.api.ConstraintService)"; resolution:=optional; cardinality:=multiple, osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=1.10))'''
    }
}

