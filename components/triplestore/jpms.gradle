apply plugin: 'osgi'
apply plugin: 'com.zyxist.chainsaw'

description = 'Trellis Triplestore'

ext {
    moduleName = 'org.trellisldp.jpms.triplestore'
}

javaModule {
    name = moduleName
    extraTestModules = ['org.mockito','org.trellisldp.id', 'org.trellisldp.test']
    hacks {
        patches('org.hamcrest:hamcrest.library', 'org.hamcrest:hamcrest.core')
    }
}

dependencies {
    patch "org.hamcrest:hamcrest-library:$hamcrestLibraryVersion"

    api("org.apache.commons:commons-rdf-api:$commonsRdfVersion")
    api("org.glassfish.hk2.external:javax.inject:$javaxInjectVersion")
    api project(':trellis-api')
    api project(':trellis-audit');

    implementation ("commons-io:commons-io:$commonsIoVersion") {force = true}
    implementation("org.apache.commons:commons-rdf-jena:$commonsRdfVersion")
    implementation("org.apache.jena:jena-arq:$jenaVersion")
    implementation("org.apache.jena:jena-core:$jenaVersion")
    implementation("org.apache.jena:jena-rdfconnection:$jenaVersion")
    implementation project(':trellis-vocabulary')

    testImplementation("ch.qos.logback:logback-classic:$logbackVersion")
    testImplementation("org.awaitility:awaitility:$awaitilityVersion")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
    testImplementation project(':trellis-id');
    testImplementation project(':trellis-test');

}

jar {
    manifest {
        description project.description
        docURL project.docURL
        vendor project.vendor
        license project.license

        instruction 'Automatic-Module-Name', moduleName
        instruction 'Import-Package', '*'
        instruction 'Export-Package', "$moduleName;version=$projectOsgiVersion"
    }
    appendix 'jpms'
}

