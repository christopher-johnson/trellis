apply plugin: 'com.zyxist.chainsaw'

buildscript {
    repositories {
      jcenter()
    }
}

description = """Integration tests for Trellis components"""

def randomPort() {
    try {
        ServerSocket server = new ServerSocket()
        server.setReuseAddress(true)
        server.bind(new InetSocketAddress(0))
        int port = server.getLocalPort()
        server.close()
        return port
    } catch (IOException e) {
        throw new IOException('Failed to find random free port', e)
    }
}

description = """Common tests for Trellis components"""

repositories {
  jcenter()
  mavenLocal()
  mavenCentral()
}

configurations {
    karafDistro {
        description = 'Configuration used to isolate the dependency on the Karaf distro'
        transitive = false
    }
    all {
        exclude group: 'xml-apis', module: 'xml-apis'
    }
}


sonarqube {
    skipProject = true
}

javaModule {
    name = 'org.trellisldp.jpms.test'
    extraTestModules = ['org.mockito']
    hacks {
        patches('org.hamcrest:hamcrest-library', 'org.hamcrest:hamcrest-core')
        patches('org.apache.geronimo.specs:geronimo-jms_1.1_spec', 'javax.jms:javax.jms-api')
    }
}

dependencies {
    patch "org.hamcrest:hamcrest-library:$hamcrestLibraryVersion"
    patch "org.apache.geronimo.specs:geronimo-jms_1.1_spec:$geronimoJmsSpecVersion"

    implementation("com.google.guava:guava:$guavaVersion")
    implementation("commons-codec:commons-codec:$commonsCodecVersion") {force = true}
    implementation("com.github.jsonld-java:jsonld-java:$jsonldVersion") {force = true}
    implementation("io.jsonwebtoken:jjwt:$jwtVersion")
    implementation("javax.jms:javax.jms-api:$jmsApiVersion")
    implementation("javax.ws.rs:javax.ws.rs-api:$jaxrsVersion")
    implementation("org.apache.commons:commons-rdf-api:$commonsRdfVersion")
    implementation("org.apache.commons:commons-rdf-jena-jpms:$commonsRdfJenaVersion")
    implementation("org.apache.thrift:libthrift:$thriftVersion")
    implementation("org.awaitility:awaitility:$awaitilityVersion")
    implementation("org.apache.servicemix.bundles:org.apache.servicemix.bundles.xerces:$servicemixXercesVersion")
    //implementation("org.apache.activemq:activemq-client:$activeMqVersion
    implementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    runtime("org.junit.jupiter:junit-jupiter-engine:$junitVersion")

    implementation("org.trellisldp:trellis-api-jpms:$version")
    implementation("org.trellisldp:trellis-http-jpms:$version")
    implementation("org.trellisldp:trellis-io-jena-jpms:$version")
    implementation("org.trellisldp:trellis-vocabulary-jpms:$version")

    testCompile("ch.qos.logback:logback-classic:$logbackVersion")
    testCompile("org.mockito:mockito-core:$mockitoVersion")
}


