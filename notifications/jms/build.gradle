apply plugin: 'java-library'
apply plugin: 'osgi'

description = 'Trellis Notifications (JMS)'

ext {
    moduleName = 'org.trellisldp.jms'
}

dependencies {
    api("javax.jms:javax.jms-api:$jmsApiVersion")
    api("org.glassfish.hk2.external:javax.inject:$javaxInjectVersion")
    api project(':trellis-api')

    implementation("org.apache.tamaya:tamaya-api:$tamayaVersion")
    implementation("org.slf4j:slf4j-api:$slf4jVersion")

    testImplementation("ch.qos.logback:logback-classic:$logbackVersion")
    testImplementation("org.apache.activemq:activemq-client:$activeMqVersion")
    testImplementation("javax.annotation:javax.annotation-api:$javaxAnnotationsVersion")
    testImplementation("org.apache.commons:commons-rdf-simple:$commonsRdfVersion")
    testImplementation("org.apache.tamaya:tamaya-core:$tamayaVersion")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
    testImplementation project(':trellis-event-serialization')
    testImplementation project(':trellis-vocabulary')
}

jar {
    manifest {
        description project.description
        docURL project.docURL
        vendor project.vendor
        license project.license

        instruction 'Automatic-Module-Name', moduleName
        instruction 'Import-Package', 'org.apache.activemq,org.apache.activemq.pool,*'
        instruction 'Export-Package', "${moduleName};version=${projectOsgiVersion}"
        instruction 'Require-Capability', '''\
            osgi.extender; filter:="(osgi.extender=osgi.serviceloader.processor)",
            osgi.serviceloader;
                filter:="(osgi.serviceloader=org.trellisldp.api.ActivityStreamService)";
                resolution:=mandatory; cardinality:=mandatory
            '''
    }
}

artifacts {
    archives (file('build/cfg/main/org.trellisldp.jms.cfg')) {
        classifier 'configuration'
        type 'cfg'
    }
}

