apply plugin: 'osgi'
apply plugin: 'com.zyxist.chainsaw'

description = 'Trellis HTTP API'

ext {
    moduleName = 'org.trellisldp.http'
}

javaModule {
    name = 'org.trellisldp.http'
    extraTestModules = ['org.mockito','org.trellisldp.audit','org.trellisldp.id','org.trellisldp.io']
    hacks {
        patches('javax.annotation:javax.annotation-api', 'org.apache.geronimo.specs:geronimo-annotation_1.2_spec')
        patches('com.google.code.findbugs:jsr305', 'javax.annotation:jsr250-api')
    }
}

configurations {
    api {
        exclude group: 'javax.inject', module: 'javax.inject'
    }
}

dependencies {
    patch "org.apache.geronimo.specs:geronimo-annotation_1.2_spec:$geronimoAnnotationSpecVersion"
    patch "com.google.code.findbugs:jsr305:$jsr305Version"

    api("io.dropwizard.metrics:metrics-annotation:$metricsVersion")
    api("javax.annotation:javax.annotation-api:$javaxAnnotationsVersion")
    api("javax.ws.rs:javax.ws.rs-api:$jaxrsVersion")
    api("org.apache.commons:commons-rdf-api:$commonsRdfVersion")
    api("org.glassfish.hk2.external:javax.inject:$javaxInjectVersion")
    api project(':trellis-api')

    implementation ("commons-codec:commons-codec:$commonsCodecVersion") {force = true}
    implementation ("commons-io:commons-io:$commonsIoVersion") {force = true}
    implementation("javax.json:javax.json-api:$javaxJsonVersion")
    implementation("org.apache.tamaya:tamaya-api:$tamayaVersion")
    implementation("org.slf4j:slf4j-api:$slf4jVersion")
    implementation project(':trellis-vocabulary')

    testImplementation("com.google.guava:guava:$guavaVersion")
    testImplementation("com.github.jsonld-java:jsonld-java:$jsonldVersion") {force = true}
    testImplementation("org.apache.commons:commons-text:$commonsTextVersion")
    testImplementation("org.apache.commons:commons-rdf-simple:$commonsRdfVersion")
    testImplementation("org.apache.httpcomponents:httpclient-cache:$httpclientVersion")
    testImplementation("org.apache.tamaya:tamaya-core:$tamayaVersion")
    testImplementation("org.apache.thrift:libthrift:$thriftVersion")
    testImplementation("org.glassfish:javax.json:$jsonVersion")
    testImplementation("org.glassfish.jersey.core:jersey-server:$jerseyVersion")
    testImplementation("org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:$jerseyVersion")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
    testImplementation project(':trellis-audit')
    testImplementation project(':trellis-constraint-rules')
    testImplementation project(':trellis-event-serialization')
    testImplementation project(':trellis-id')
    testImplementation project(':trellis-io-jena')

    testRuntimeClasspath("javax.xml.bind:jaxb-api:$jaxbVersion")
    testRuntimeClasspath("javax.activation:javax.activation-api:$activationApiVersion")
    testRuntimeClasspath("ch.qos.logback:logback-classic:$logbackVersion")
}

jar {
    manifest {
        description project.description
        docURL project.docURL
        vendor project.vendor
        license project.license

        instruction 'Automatic-Module-Name', moduleName
        instruction 'Import-Package', '*'
        instruction 'Export-Package', "${moduleName};version=${projectOsgiVersion}"
        instruction 'Require-Capability', '''\
            osgi.extender; filter:="(osgi.extender=osgi.serviceloader.processor)",
            osgi.serviceloader;
                filter:="(osgi.serviceloader=org.trellisldp.api.AuditService)";
                resolution:=optional; cardinality:=optional,
            osgi.serviceloader;
                filter:="(osgi.serviceloader=org.trellisldp.api.ConstraintService)";
                resolution:=optional; cardinality:=multiple
            '''
    }
    appendix 'jpms'
}

